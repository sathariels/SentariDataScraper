{
  "nodes": [
    {
      "parameters": {
        "url": "https://api.outscraper.cloud/appstore/reviews?query=https://apps.apple.com/us/app/untold-voice-journal/id6451427834&limit=300&async=false",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "=M2I5MDBlNjcyNTk0NDhkZWFhZTc0NTg2ZDc0MjI5YmF8MDRkOWNjZDFjYQ"
            }
          ]
        },
        "options": {}
      },
      "id": "18e1d826-8d6f-4c9b-a721-b1d638cb65b3",
      "name": "Scrape iOS Reviews",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        544,
        16
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ws5HdNhmubfvm6Sn",
          "name": "Header Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.outscraper.cloud/google-play/reviews?query=com.dayoneapp.dayone&limit=500&sort=newest&false",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-KEY",
              "value": "=M2I5MDBlNjcyNTk0NDhkZWFhZTc0NTg2ZDc0MjI5YmF8MDRkOWNjZDFjYQ"
            }
          ]
        },
        "options": {}
      },
      "id": "d796a990-9e2b-473d-8096-5d25f49def14",
      "name": "Scrape Android Reviews",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        528,
        192
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ws5HdNhmubfvm6Sn",
          "name": "Header Auth account 3"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process and clean review data from Outscraper API\nconst items = $input.all();\nconst processedReviews = [];\n\nfor (const item of items) {\n  const appName = item.json.app_name;\n  \n  // Handle Outscraper response format\n  // The response comes as an array with objects containing status and data\n  if (Array.isArray(item.json)) {\n    for (const responseItem of item.json) {\n      if (responseItem.status === 'Success' && responseItem.data && Array.isArray(responseItem.data)) {\n        // data contains nested arrays, so we need to flatten them\n        for (const dataArray of responseItem.data) {\n          if (Array.isArray(dataArray)) {\n            for (const review of dataArray) {\n              // Determine platform based on the query URL\n              let platform = 'Unknown';\n              if (review.query && review.query.includes('apps.apple.com')) {\n                platform = 'iOS App Store';\n              } else if (review.query && review.query.includes('play.google.com')) {\n                platform = 'Google Play Store';\n              }\n              \n              processedReviews.push({\n                app_name: appName,\n                platform: platform,\n                review_id: review.review_id || '',\n                rating: parseInt(review.review_rating) || 0,\n                title: review.review_title || '',\n                review_text: review.review_text || '',\n                author: review.author_title || review.author_name || '',\n                date: review.review_updated || review.review_date_formated || '',\n                helpful_count: parseInt(review.vote_sum) || 0,\n                vote_count: parseInt(review.vote_count) || 0,\n                version: review.version || '',\n                country: review.country || '',\n                timestamp: review.review_timestamp || 0\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  // Also handle if the response is directly in the expected format\n  // (fallback for different response structures)\n  else if (item.json.status === 'Success' && item.json.data) {\n    const dataToProcess = Array.isArray(item.json.data[0]) ? item.json.data[0] : item.json.data;\n    \n    if (Array.isArray(dataToProcess)) {\n      for (const review of dataToProcess) {\n        let platform = 'Unknown';\n        if (review.query && review.query.includes('apps.apple.com')) {\n          platform = 'iOS App Store';\n        } else if (review.query && review.query.includes('play.google.com')) {\n          platform = 'Google Play Store';\n        }\n        \n        processedReviews.push({\n          app_name: appName,\n          platform: platform,\n          review_id: review.review_id || '',\n          rating: parseInt(review.review_rating) || 0,\n          title: review.review_title || '',\n          review_text: review.review_text || '',\n          author: review.author_title || review.author_name || '',\n          date: review.review_updated || review.review_date_formated || '',\n          helpful_count: parseInt(review.vote_sum) || 0,\n          vote_count: parseInt(review.vote_count) || 0,\n          version: review.version || '',\n          country: review.country || '',\n          timestamp: review.review_timestamp || 0\n        });\n      }\n    }\n  }\n}\n\n// Remove duplicates and filter out empty reviews\nconst uniqueReviews = processedReviews.filter((review, index, self) => {\n  return review.review_text.trim() !== '' && \n         index === self.findIndex(r => \n           r.review_id === review.review_id && \n           r.platform === review.platform\n         );\n});\n\n// Sort by timestamp (newest first), fallback to date string\nuniqueReviews.sort((a, b) => {\n  if (a.timestamp && b.timestamp) {\n    return b.timestamp - a.timestamp;\n  }\n  return new Date(b.date) - new Date(a.date);\n});\n\nreturn uniqueReviews.map(review => ({ json: review }));"
      },
      "id": "2665fd95-d7a0-48a6-a741-24269aba25dc",
      "name": "Process Reviews",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        16
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "9bc5f6bc-1d7f-4d9e-8a5b-83db6f36e8bd",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1120,
        16
      ],
      "id": "b4075686-ab17-4ef2-b1dd-1f067bdf0057",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "url": "https://api.outscraper.cloud/requests/a-968bbfa2-9da4-4a3e-a4cf-a160e68f205c",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        176
      ],
      "id": "50f9e27e-243f-4989-a533-f8930a5a0c0a",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "// Process and clean review data from Outscraper API\nconst items = $input.all();\nconst processedReviews = [];\n\nfor (const item of items) {\n  const appName = item.json.app_name;\n  \n  // Handle Outscraper response format\n  // The response comes as an array with objects containing status and data\n  if (Array.isArray(item.json)) {\n    for (const responseItem of item.json) {\n      if (responseItem.status === 'Success' && responseItem.data && Array.isArray(responseItem.data)) {\n        // data contains nested arrays, so we need to flatten them\n        for (const dataArray of responseItem.data) {\n          if (Array.isArray(dataArray)) {\n            for (const review of dataArray) {\n              // Determine platform based on the query URL\n              let platform = 'Unknown';\n              if (review.query && review.query.includes('apps.apple.com')) {\n                platform = 'iOS App Store';\n              } else if (review.query && review.query.includes('play.google.com')) {\n                platform = 'Google Play Store';\n              }\n              \n              processedReviews.push({\n                app_name: appName,\n                platform: platform,\n                review_id: review.review_id || '',\n                rating: parseInt(review.review_rating) || 0,\n                title: review.review_title || '',\n                review_text: review.review_text || '',\n                author: review.author_title || review.author_name || '',\n                date: review.review_updated || review.review_date_formated || '',\n                helpful_count: parseInt(review.vote_sum) || 0,\n                vote_count: parseInt(review.vote_count) || 0,\n                version: review.version || '',\n                country: review.country || '',\n                timestamp: review.review_timestamp || 0\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  // Also handle if the response is directly in the expected format\n  // (fallback for different response structures)\n  else if (item.json.status === 'Success' && item.json.data) {\n    const dataToProcess = Array.isArray(item.json.data[0]) ? item.json.data[0] : item.json.data;\n    \n    if (Array.isArray(dataToProcess)) {\n      for (const review of dataToProcess) {\n        let platform = 'Unknown';\n        if (review.query && review.query.includes('apps.apple.com')) {\n          platform = 'iOS App Store';\n        } else if (review.query && review.query.includes('play.google.com')) {\n          platform = 'Google Play Store';\n        }\n        \n        processedReviews.push({\n          app_name: appName,\n          platform: platform,\n          review_id: review.review_id || '',\n          rating: parseInt(review.review_rating) || 0,\n          title: review.review_title || '',\n          review_text: review.review_text || '',\n          author: review.author_title || review.author_name || '',\n          date: review.review_updated || review.review_date_formated || '',\n          helpful_count: parseInt(review.vote_sum) || 0,\n          vote_count: parseInt(review.vote_count) || 0,\n          version: review.version || '',\n          country: review.country || '',\n          timestamp: review.review_timestamp || 0\n        });\n      }\n    }\n  }\n}\n\n// Remove duplicates and filter out empty reviews\nconst uniqueReviews = processedReviews.filter((review, index, self) => {\n  return review.review_text.trim() !== '' && \n         index === self.findIndex(r => \n           r.review_id === review.review_id && \n           r.platform === review.platform\n         );\n});\n\n// Sort by timestamp (newest first), fallback to date string\nuniqueReviews.sort((a, b) => {\n  if (a.timestamp && b.timestamp) {\n    return b.timestamp - a.timestamp;\n  }\n  return new Date(b.date) - new Date(a.date);\n});\n\nreturn uniqueReviews.map(review => ({ json: review }));"
      },
      "id": "c2b97d25-a567-4456-90d7-d4586bcec349",
      "name": "Process Reviews1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        320
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1232,
        416
      ],
      "id": "54bb6b99-9da1-4147-9387-7d2c539ccd56",
      "name": "Convert to File1"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1062c6d6-1830-48bb-a697-8aa702df3f1d",
      "name": "Spreadsheet → Items2",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [
        1664,
        128
      ],
      "notes": "Parses CSV rows into items."
    },
    {
      "parameters": {
        "jsCode": "// Randomly sample up to 10 rows and build concise bullets.\nconst items = $input.all();\nconst rows = items.map(i => i.json);\n// Try to auto-detect likely text column\nconst guessTextKey = (row) => {\n  const prefer = ['text','review','review_text','body','content','comment','message','desc','description'];\n  for (const k of prefer) {\n    if (row[k] && String(row[k]).trim()) return k;\n  }\n  // fallback: longest string field\n  const keys = Object.keys(row);\n  let best = null, len = 0;\n  for (const k of keys) {\n    const v = row[k];\n    if (typeof v === 'string' && v.trim().length > len) { \n      best = k; \n      len = v.trim().length; \n    }\n  }\n  return best || 'text';\n};\nconst tKey = rows.length ? guessTextKey(rows[0]) : 'text';\n// Fisher–Yates shuffle then slice\nfor (let i = rows.length - 1; i > 0; i--) {\n  const j = Math.floor(Math.random() * (i + 1));\n  [rows[i], rows[j]] = [rows[j], rows[i]];\n}\nconst take = rows.slice(0, Math.min(10, rows.length));\nfunction trunc(s, n=600) { \n  if(!s) return ''; \n  s = String(s); \n  return s.length > n ? s.slice(0, n-3) + \"...\" : s; \n}\nconst bullets = take.map((r, idx) => {\n  const id = r.id ?? r.ID ?? r.row_id ?? (idx + 1);\n  const product = r.product ? ` (${r.product})` : '';\n  const rating = (r.rating != null && r.rating !== '') ? ` ★${r.rating}` : '';\n  const text = trunc(r[tKey] || '');\n  return `- [${id}]${product}${rating}: ${text}`;\n}).join('\\n');\nreturn [{ \n  json: { \n    count: take.length, \n    bullets, \n    textKeyUsed: tKey \n  } \n}];"
      },
      "id": "e71c830b-cd1c-4f0e-8611-4ed9e6db440c",
      "name": "Random Sample 2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1904,
        112
      ],
      "notes": "🔧 If your text column has a specific name, hardcode it instead of auto-detect."
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are to chooose 10 of the 500 data points avalible in th reviews avalable and create a 1 page summary of what you have read{{ $json.bullets }}",
        "options": {
          "systemMessage": "You are a helpYou are an AI analyst tasked with reading a random sample of user reviews stored in a csv table. \nYour goal is to produce a concise, decision-ready one-page brief plus a simple diagram.\n\n**Your outputs must always include two parts:**\n1. A **Markdown one-page report** (~300–500 words) that contains:\n   - TL;DR (1–2 bullets summarizing the main insights)\n   - Top 3–6 themes with rough % shares (estimate from the sample)\n   - Sentiment mix (negative / neutral / positive, with approximate %)\n   - 3 short, verbatim quotes from the sample that represent important points (do not fabricate quotes; skip if none are short enough)\n   - “Quick Wins” (actions feasible in 0–2 weeks)\n   - “Next Bets” (strategic actions feasible in 1–2 months)\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2112,
        112
      ],
      "id": "3bb826f3-c436-400c-a962-1b6cca24277c",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1984,
        320
      ],
      "id": "73c75a5a-2721-476e-9d7e-a28149d17965",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "cxh77myWBQcQ6TTi",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "https://docs.google.com/document/d/1NYGWqCaWFlVSkO3OnEBCpI4cv9aNeG2ajRJdTLimNl8/edit?usp=sharing",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2464,
        112
      ],
      "id": "ac79cc8a-325c-4f24-92b6-3f7a5813bd47",
      "name": "Update a document2",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "3w5aMOayAruuMC0g",
          "name": "Google Docs account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "5bfff1eb-681b-49c2-926f-64cd4a5110bd",
      "name": "Spreadsheet → Items3",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [
        1632,
        480
      ],
      "notes": "Parses CSV rows into items."
    },
    {
      "parameters": {
        "jsCode": "// Randomly sample up to 10 rows and build concise bullets.\nconst items = $input.all();\nconst rows = items.map(i => i.json);\n// Try to auto-detect likely text column\nconst guessTextKey = (row) => {\n  const prefer = ['text','review','review_text','body','content','comment','message','desc','description'];\n  for (const k of prefer) {\n    if (row[k] && String(row[k]).trim()) return k;\n  }\n  // fallback: longest string field\n  const keys = Object.keys(row);\n  let best = null, len = 0;\n  for (const k of keys) {\n    const v = row[k];\n    if (typeof v === 'string' && v.trim().length > len) { \n      best = k; \n      len = v.trim().length; \n    }\n  }\n  return best || 'text';\n};\nconst tKey = rows.length ? guessTextKey(rows[0]) : 'text';\n// Fisher–Yates shuffle then slice\nfor (let i = rows.length - 1; i > 0; i--) {\n  const j = Math.floor(Math.random() * (i + 1));\n  [rows[i], rows[j]] = [rows[j], rows[i]];\n}\nconst take = rows.slice(0, Math.min(10, rows.length));\nfunction trunc(s, n=600) { \n  if(!s) return ''; \n  s = String(s); \n  return s.length > n ? s.slice(0, n-3) + \"...\" : s; \n}\nconst bullets = take.map((r, idx) => {\n  const id = r.id ?? r.ID ?? r.row_id ?? (idx + 1);\n  const product = r.product ? ` (${r.product})` : '';\n  const rating = (r.rating != null && r.rating !== '') ? ` ★${r.rating}` : '';\n  const text = trunc(r[tKey] || '');\n  return `- [${id}]${product}${rating}: ${text}`;\n}).join('\\n');\nreturn [{ \n  json: { \n    count: take.length, \n    bullets, \n    textKeyUsed: tKey \n  } \n}];"
      },
      "id": "44ead811-e1e5-4402-91af-b7996182c894",
      "name": "Random Sample 3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1872,
        464
      ],
      "notes": "🔧 If your text column has a specific name, hardcode it instead of auto-detect."
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are to chooose 10 of the 500 data points avalible in th reviews avalable and create a 1 page summary of what you have read{{ $json.bullets }}",
        "options": {
          "systemMessage": "You are a helpYou are an AI analyst tasked with reading a random sample of user reviews stored in a csv table. \nYour goal is to produce a concise, decision-ready one-page brief plus a simple diagram.\n\n**Your outputs must always include two parts:**\n1. A **Markdown one-page report** (~300–500 words) that contains:\n   - TL;DR (1–2 bullets summarizing the main insights)\n   - Top 3–6 themes with rough % shares (estimate from the sample)\n   - Sentiment mix (negative / neutral / positive, with approximate %)\n   - 3 short, verbatim quotes from the sample that represent important points (do not fabricate quotes; skip if none are short enough)\n   - “Quick Wins” (actions feasible in 0–2 weeks)\n   - “Next Bets” (strategic actions feasible in 1–2 months)\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2080,
        464
      ],
      "id": "21cb2883-a0e1-4c6b-946a-ccf87147a24e",
      "name": "AI Agent3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1952,
        672
      ],
      "id": "cb94ee64-4a83-4f46-afe6-d45879f0c207",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "cxh77myWBQcQ6TTi",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "documentURL": "https://docs.google.com/document/d/1Pb-e4PhHk0vexkWJGNiepAdXPqQ18Vl2Mf_9DNBejqA/edit?usp=sharing",
        "actionsUi": {
          "actionFields": [
            {
              "action": "insert",
              "text": "={{ $json.output }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        2432,
        464
      ],
      "id": "b4f0666a-a080-4113-aa40-cee53360706d",
      "name": "Update a document3",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "3w5aMOayAruuMC0g",
          "name": "Google Docs account"
        }
      }
    }
  ],
  "connections": {
    "Scrape iOS Reviews": {
      "main": [
        [
          {
            "node": "Process Reviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Android Reviews": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Reviews": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Scrape iOS Reviews",
            "type": "main",
            "index": 0
          },
          {
            "node": "Scrape Android Reviews",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Spreadsheet → Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Process Reviews1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Reviews1": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Spreadsheet → Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet → Items2": {
      "main": [
        [
          {
            "node": "Random Sample 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Random Sample 2": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Update a document2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Spreadsheet → Items3": {
      "main": [
        [
          {
            "node": "Random Sample 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Random Sample 3": {
      "main": [
        [
          {
            "node": "AI Agent3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent3": {
      "main": [
        [
          {
            "node": "Update a document3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "a1a9e97037ece0c53211ba71fe7552886bc22f4e46fdee4a735dd7d1d1a70810"
  }
}
